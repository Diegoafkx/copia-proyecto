/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto.de.bioinform√°tica;
import Estructura_de_datos.ArbolBinarioDeBusqueda;
import Estructura_de_datos.patronADN;
import Estructura_de_datos.Nodo;
import java.util.Enumeration;
import java.util.Hashtable;
/**
 *
 * @author Diego Arreaza y Vyckhy Sarmiento
 */
public class Menu extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Menu.class.getName());
    /**
     * String con la cadena de adn de la cadena de texto
     */
    private static String cadena;
    /**
     * Hashtable que tiene de key la tripleta y de valor un dato patronADN 
     */
    private Hashtable<String, patronADN> tripleta;
    /**
     * Matriz que contiene de materna organizada los keys del hashtable
     */
    private String[] tripleta_ordenada;
    /**
     * 
     */
    private ArbolBinarioDeBusqueda arbol;
    /**
     * Creates new form Ventana1
     * @param c cadena de ADN
     */
    public Menu(String c) {
        cadena = c;
        initComponents();
        this.CrearhashTable();
        this.organizar_posiciones();
        this.Crear_arbol_binario_de_busqueda();
        this.setVisible(true);
    }
    
    /**
     * Metodo que se encarga de crear el hashtable con las tripletas de adn
     * Revisa si la tripleta se encuentra dentro del Hash, si se encuentraa se aumenta su frecuencia y se coloca la posicion y si no se agrega en el hastable
     */
    private void CrearhashTable(){
        tripleta = new Hashtable<>();
        for (int i = 0; i+2 < cadena.length(); i=i+3) {
            
            String aux = cadena.substring(i, i + 3);
            if (tripleta.containsKey(aux)) {
                tripleta.get(aux).agregarPosicion(i);
                tripleta.get(aux).incrementarFrecuencia();
            }else{
                patronADN adn= new patronADN(aux,i);
                tripleta.put(aux,adn );
            }
        }
    }
    
    /**
     * metodo que se encarga de organizar los keys de la hashtable por orden de frecuendia en una matriz
     */
    private void organizar_posiciones(){
        tripleta_ordenada = new String[tripleta.size()];
        
        int i = 0;
        int x =0;
        Enumeration<String> keys = tripleta.keys();
        String key = keys.nextElement();
        int menor = ((patronADN) tripleta.get(key)).getFrecuencia();
        String adn = key;
        
        while(tripleta_ordenada[tripleta.size()-1] == null){  
            
            if(i == tripleta.size()-1){
                
                keys = tripleta.keys();
                tripleta_ordenada[x] = adn;
                x++;
                i=0;
                menor=Integer.MAX_VALUE;
            }
            
            key = keys.nextElement();
            if(((patronADN) tripleta.get(key)).getFrecuencia()<= menor){
                 boolean buscador = false;
                for (int j = 0; tripleta_ordenada[j]!=null; j++) {
                    if (tripleta_ordenada[j].equals(key)) {
                       buscador = true;
                       break;
                    }
                }
                if (buscador ==false) {
                    menor = ((patronADN) tripleta.get(key)).getFrecuencia();
                    adn = key;
                }
            }
            i++;
        }
    }
    
    /**
     * Metodo que se encarga de crear el arbol binario de busqueda
     */
    private void Crear_arbol_binario_de_busqueda(){
        arbol = new ArbolBinarioDeBusqueda();
        int posicion_raiz = (int) (tripleta.size()-1)/2;
        Nodo aux = new Nodo(tripleta.get(tripleta_ordenada[posicion_raiz]));
        arbol.setRoot(aux);
        Enumeration<String> keys = tripleta.keys();
        String key = keys.nextElement();
        for (int i = 1; i < tripleta.size(); i++) {
            if(key.equals(tripleta_ordenada[posicion_raiz])!= true){
                arbol.insertar(tripleta.get(tripleta_ordenada[i]));
            }
            key = keys.nextElement();
        }
    }
    
    /**
     * Metodo que se encarga ded retornar al arbol formado por las tripletas de la cadena por orden de frecuencia
     * @return arbol binario de busqueda con las tripletas
     */
    public ArbolBinarioDeBusqueda get_Arbol(){
        return arbol;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Lista_Tripletas = new javax.swing.JButton();
        Ver_Max_Min = new javax.swing.JButton();
        Lista_Aminoacidos = new javax.swing.JButton();
        Buscar_Tripleta_Espefica = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Lista_Tripletas.setText("Ver Lista de las Tripletas que forman a la cadena");
        Lista_Tripletas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Lista_TripletasActionPerformed(evt);
            }
        });
        jPanel1.add(Lista_Tripletas, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 530, 70));

        Ver_Max_Min.setText("Ver a la Tripleta con el Maximo o el Minimo de frecuencia en la cadena");
        Ver_Max_Min.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ver_Max_MinActionPerformed(evt);
            }
        });
        jPanel1.add(Ver_Max_Min, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 380, 530, 70));

        Lista_Aminoacidos.setText("Ver Lista de los Aminoacidos");
        Lista_Aminoacidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Lista_AminoacidosActionPerformed(evt);
            }
        });
        jPanel1.add(Lista_Aminoacidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 490, 530, 70));

        Buscar_Tripleta_Espefica.setText("Buscar Tripleta especifica");
        jPanel1.add(Buscar_Tripleta_Espefica, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 270, 530, 70));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 610));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void Lista_TripletasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Lista_TripletasActionPerformed
    Lista_de_Tripletas nuevaVentana = new Lista_de_Tripletas();
    nuevaVentana.setVisible(true);
       
    }//GEN-LAST:event_Lista_TripletasActionPerformed

    private void Ver_Max_MinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ver_Max_MinActionPerformed
    Ver_Max_Min nuevaVentana = new Ver_Max_Min(this); 
    nuevaVentana.setVisible(true);
    this.dispose(); 

        // TODO add your handling code here:
    }//GEN-LAST:event_Ver_Max_MinActionPerformed

    private void Lista_AminoacidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Lista_AminoacidosActionPerformed
        Ver_Lista_de_ARN ventana = new Ver_Lista_de_ARN();
        ventana.setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_Lista_AminoacidosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Menu(cadena).setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Buscar_Tripleta_Espefica;
    private javax.swing.JButton Lista_Aminoacidos;
    private javax.swing.JButton Lista_Tripletas;
    private javax.swing.JButton Ver_Max_Min;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
