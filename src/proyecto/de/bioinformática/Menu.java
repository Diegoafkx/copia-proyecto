/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto.de.bioinformática;
import Estructura_de_datos.ArbolBinarioDeBusqueda;
import Estructura_de_datos.patronADN;
import Estructura_de_datos.Hashtable;
/**
 *
 * @author Diego Arreaza y Vyckhy Sarmiento
 */
public class Menu extends javax.swing.JFrame {
    
     
   
    
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Menu.class.getName());
    /**
     * String con la cadena de adn de la cadena de texto
     */
    private String cadena;
    /**
     * Hashtable que tiene de key la tripleta y de valor un dato patronADN 
     */
    private Hashtable tripleta;
    /**
     * ArbolBinarioDeBusqueda que almacena los patrones ADN, ordenados por frecuencia.
     */
    private ArbolBinarioDeBusqueda arbol;
    /**
     * Creates new form Ventana1
     * @param cadenaADN
     */
    public Menu(String cadenaADN) {
        this.cadena = cadenaADN;
        initComponents();
        initStructures();
        Colisiones aux = new Colisiones(this);
    }
    
     private void initStructures() {
        // 1. Crear tabla hash con los tripletes
        tripleta = new Hashtable(1000);
        CrearhashTable();

        // 2. Construir árbol binario de búsqueda
        arbol = new ArbolBinarioDeBusqueda();
        Crear_arbol_binario_de_busqueda();
    }
    
     public void back(){
         this.setVisible(true);
     }
     
    /**
     * Retorna la instancia de la tabla hash.
     * @return La tabla hash de patrones ADN.
     */
    public Hashtable get_tablahash(){
        return tripleta;
    }
    /**
     * Retorna la instancia del árbol binario de búsqueda.
     * @return El árbol binario de búsqueda de patrones ADN.
     */
    public ArbolBinarioDeBusqueda get_Arbol() {
        return arbol;
    }
    /**
     * Metodo que se encarga de crear el hashtable con las tripletas de adn
     * Revisa si la tripleta se encuentra dentro del Hash, si se encuentraa se aumenta su frecuencia y se coloca la posicion y si no se agrega en el hastable
     */
    private void CrearhashTable(){
         for (int i = 0; i <= cadena.length() - 3; i += 3) {
            String triplete = cadena.substring(i, i + 3);
            
            if (tripleta.contiene_la_clave(triplete)) {
                patronADN existente = tripleta.get(triplete);
                existente.incrementarFrecuencia();
                existente.agregarPosicion(i);
            } else {
                tripleta.put(triplete, new patronADN(triplete, i));
            }
        }
    }
    
    /**
     * Metodo que se encarga de crear el arbol binario de busqueda
     */
    private void Crear_arbol_binario_de_busqueda(){
      patronADN[] patrones = tripleta.getAllPatrones();
        for (patronADN patron : patrones) {
            if (patron != null) {
                arbol.insertar(patron);
            }
        }
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Lista_Tripletas = new javax.swing.JButton();
        Ver_Max_Min = new javax.swing.JButton();
        Lista_Aminoacidos = new javax.swing.JButton();
        Buscar_Tripleta_Espefica = new javax.swing.JButton();
        Exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Lista_Tripletas.setText("Ver Lista de las Tripletas que forman a la cadena");
        Lista_Tripletas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Lista_TripletasActionPerformed(evt);
            }
        });
        jPanel1.add(Lista_Tripletas, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 530, 70));

        Ver_Max_Min.setText("Ver a la Tripleta con el Maximo o el Minimo de frecuencia en la cadena");
        Ver_Max_Min.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ver_Max_MinActionPerformed(evt);
            }
        });
        jPanel1.add(Ver_Max_Min, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 380, 530, 70));

        Lista_Aminoacidos.setText("Ver Lista de los Aminoacidos");
        Lista_Aminoacidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Lista_AminoacidosActionPerformed(evt);
            }
        });
        jPanel1.add(Lista_Aminoacidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 490, 530, 70));

        Buscar_Tripleta_Espefica.setText("Buscar Tripleta especifica");
        Buscar_Tripleta_Espefica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Buscar_Tripleta_EspeficaActionPerformed(evt);
            }
        });
        jPanel1.add(Buscar_Tripleta_Espefica, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 270, 530, 70));

        Exit.setBackground(new java.awt.Color(204, 0, 51));
        Exit.setText("X");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jPanel1.add(Exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 0, 70, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 830, 610));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void Lista_TripletasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Lista_TripletasActionPerformed
    Lista_de_Tripletas nuevaVentana = new Lista_de_Tripletas(this);
    nuevaVentana.setVisible(true);
    this.setVisible(false); 
       
    }//GEN-LAST:event_Lista_TripletasActionPerformed

    private void Ver_Max_MinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ver_Max_MinActionPerformed
    Ver_Max_Min nuevaVentana = new Ver_Max_Min(this); 
    nuevaVentana.setVisible(true);
    this.setVisible(false); 

        // TODO add your handling code here:
    }//GEN-LAST:event_Ver_Max_MinActionPerformed

    private void Lista_AminoacidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Lista_AminoacidosActionPerformed
        Ver_Lista_de_ARN ventana = new Ver_Lista_de_ARN(this);
        ventana.setVisible(true);
        this.setVisible(false); 
        
        // TODO add your handling code here:
    }//GEN-LAST:event_Lista_AminoacidosActionPerformed

    private void Buscar_Tripleta_EspeficaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Buscar_Tripleta_EspeficaActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        Ver_Triplete_Especifico aux = new Ver_Triplete_Especifico(this);
    }//GEN-LAST:event_Buscar_Tripleta_EspeficaActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        java.awt.EventQueue.invokeLater(() -> {
            // Ejemplo de uso (en producción se cargaría desde archivo)
            new Menu("ATGCCGTAAATGGCCTTT").setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Buscar_Tripleta_Espefica;
    private javax.swing.JButton Exit;
    private javax.swing.JButton Lista_Aminoacidos;
    private javax.swing.JButton Lista_Tripletas;
    private javax.swing.JButton Ver_Max_Min;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
